{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\westb\\\\Documents\\\\PROJET\\\\FuelTracker\\\\client_web\\\\src\\\\components\\\\PersonalRoute\\\\index.jsx\";\nimport React, { useContext } from \"react\";\nimport { Route, Redirect } from 'react-router-dom';\nimport { DataSessionContext } from '../../utils';\n\nconst PublicRoute = ({\n  children,\n  ...rest\n}) => {\n  const session = useContext(DataSessionContext);\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n    render: props => !session.getStayConnected() ? /*#__PURE__*/React.createElement(\"children\", Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 21\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: {\n        pathname: '/dashboard'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 21\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst PrivateRoute = ({\n  children,\n  ...rest\n}) => {\n  const session = useContext(DataSessionContext);\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n    render: props => session.getStayConnected() ? /*#__PURE__*/React.createElement(\"children\", Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: {\n        pathname: '/login',\n        state: {\n          from: props.location\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport { PublicRoute, PrivateRoute };","map":{"version":3,"sources":["C:/Users/westb/Documents/PROJET/FuelTracker/client_web/src/components/PersonalRoute/index.jsx"],"names":["React","useContext","Route","Redirect","DataSessionContext","PublicRoute","children","rest","session","props","getStayConnected","pathname","PrivateRoute","state","from","location"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,SAAQC,KAAR,EAAeC,QAAf,QAA8B,kBAA9B;AAEA,SAAQC,kBAAR,QAAiC,aAAjC;;AAGA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAW,KAAGC;AAAd,CAAD,KAAyB;AACzC,QAAMC,OAAO,GAAGP,UAAU,CAACG,kBAAD,CAA1B;AACA,sBACI,oBAAC,KAAD,oBACQG,IADR;AAEI,IAAA,MAAM,EACDE,KAAD,IAAW,CAACD,OAAO,CAACE,gBAAR,EAAD,gBACP,kDAAcD,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADO,gBAEP,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAEE,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AAUH,CAZD;;AAcA,MAAMC,YAAY,GAAG,CAAC;AAAEN,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,KAA2B;AAC5C,QAAMC,OAAO,GAAGP,UAAU,CAACG,kBAAD,CAA1B;AACA,sBACI,oBAAC,KAAD,oBACQG,IADR;AAEI,IAAA,MAAM,EACDE,KAAD,IAAWD,OAAO,CAACE,gBAAR,kBACP,kDAAcD,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADO,gBAEP,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAEE,QAAAA,QAAQ,EAAE,QAAZ;AAAsBE,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAEL,KAAK,CAACM;AAAd;AAA7B,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AAUH,CAZD;;AAcA,SAAQV,WAAR,EAAqBO,YAArB","sourcesContent":["import React, {useContext} from \"react\";\r\nimport {Route, Redirect} from 'react-router-dom'\r\n\r\nimport {DataSessionContext} from '../../utils'\r\n\r\n\r\nconst PublicRoute = ({children, ...rest}) => {\r\n    const session = useContext(DataSessionContext);\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={\r\n                (props) => !session.getStayConnected() ?\r\n                    <children {...props} /> :\r\n                    <Redirect to={{ pathname: '/dashboard' }} />\r\n            }\r\n        />\r\n    )\r\n};\r\n\r\nconst PrivateRoute = ({ children, ...rest }) => {\r\n    const session = useContext(DataSessionContext);\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={\r\n                (props) => session.getStayConnected() ?\r\n                    <children {...props} /> :\r\n                    <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\r\n            }\r\n        />\r\n    )\r\n};\r\n\r\nexport {PublicRoute, PrivateRoute}"]},"metadata":{},"sourceType":"module"}